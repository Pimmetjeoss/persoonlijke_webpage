import type { Metadata } from "next";
import {
  Geist,
  Geist_Mono,
  Fjalla_One,
  Quicksand,
  Bebas_Neue,
  Playfair_Display,
  Righteous,
  Archivo_Black,
  Orbitron,
  Anton,
  Permanent_Marker
} from "next/font/google";
import "./globals.css";
import { TransitionProvider } from "./components/transition_provider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const fjallaOne = Fjalla_One({
  variable: "--font-fjalla-one",
  subsets: ["latin"],
  weight: "400",
});

// Fonts voor cyclische woorden
const quicksand = Quicksand({
  variable: "--font-quicksand",
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
});

const bebasNeue = Bebas_Neue({
  variable: "--font-bebas-neue",
  subsets: ["latin"],
  weight: "400",
});

const playfairDisplay = Playfair_Display({
  variable: "--font-playfair",
  subsets: ["latin"],
  weight: ["700"],
});

const righteous = Righteous({
  variable: "--font-righteous",
  subsets: ["latin"],
  weight: "400",
});

const archivoBlack = Archivo_Black({
  variable: "--font-archivo-black",
  subsets: ["latin"],
  weight: "400",
});

const orbitron = Orbitron({
  variable: "--font-orbitron",
  subsets: ["latin"],
  weight: ["700"],
});

const anton = Anton({
  variable: "--font-anton",
  subsets: ["latin"],
  weight: "400",
});

const permanentMarker = Permanent_Marker({
  variable: "--font-permanent-marker",
  subsets: ["latin"],
  weight: "400",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${fjallaOne.variable} ${quicksand.variable} ${bebasNeue.variable} ${playfairDisplay.variable} ${righteous.variable} ${archivoBlack.variable} ${orbitron.variable} ${anton.variable} ${permanentMarker.variable} antialiased`}
      >
        <TransitionProvider
          colors={[
            'hsl(141, 78.9%, 85.1%)',
            'hsl(142.1, 76.2%, 36.3%)',
            'hsl(144.9, 80.4%, 10%)'
          ]}
          duration={2}
          stagger={0.4}
          direction="up"
        >
          {children}
        </TransitionProvider>
      </body>
    </html>
  );
}
